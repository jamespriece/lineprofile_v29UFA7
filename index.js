
const axios = require('axios');
const fs = require('fs');
const express = require('express');
const sharp = require('sharp');
const blockhash = require('./blockhash-core');
const app = express();
const port = process.env.PORT || 3000;
const config = require('./config.json');

app.get('/', (req, res) => {
  res.send('‚úÖ LINE OA Monitor with Docker is Running');
});

app.get('/check', async (req, res) => {
  console.log(`[HTTP] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å /check`);
  await checkAllAccounts();
  res.send('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡∏ó‡∏∏‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)');
});

app.listen(port, () => {
  console.log(`‚úÖ Web server started on port ${port}`);
});

async function getLineBotInfo(channelAccessToken) {
  const res = await axios.get('https://api.line.me/v2/bot/info', {
    headers: {
      Authorization: `Bearer ${channelAccessToken}`
    }
  });
  return {
    displayName: res.data.displayName,
    pictureUrl: res.data.pictureUrl || null
  };
}

async function hashImageFromUrl(url) {
  if (!url) throw new Error('Invalid URL');
  const response = await axios.get(url, { responseType: 'arraybuffer' });
  const imgBuffer = Buffer.from(response.data);
  const hash = await blockhash.bmvbhash(imgBuffer, 16);
  return hash;
}

function saveExpectedData(accountName, displayName, pictureUrl) {
  const filename = `expectedData_${accountName}.json`;
  const data = {
    displayName: displayName,
    pictureUrl: pictureUrl,
    savedAt: new Date().toISOString()
  };
  fs.writeFileSync(filename, JSON.stringify(data, null, 2));
  console.log(`üíæ ‡πÄ‡∏ã‡∏ü expected data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${accountName} ‡πÅ‡∏•‡πâ‡∏ß`);
}

async function sendTelegram(botToken, chatId, message) {
  try {
    await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      chat_id: chatId,
      text: message
    });
  } catch (err) {
    console.error("‚ùå Error sending Telegram message:", err.response?.data || err.message);
  }
}

async function checkAccount(account) {
  let alertMessages = [];
  try {
    console.log(`
üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${account.name}`);
    const current = await getLineBotInfo(account.channelAccessToken);
    console.log(`üìõ ‡∏ä‡∏∑‡πà‡∏≠ LINE ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${current.displayName}`);

    let expectedDisplayName = account.expectedDisplayName;
    let expectedPictureUrl;
    const expectedFile = `expectedData_${account.name}.json`;

    if (fs.existsSync(expectedFile)) {
      const expectedData = JSON.parse(fs.readFileSync(expectedFile));
      expectedPictureUrl = expectedData.pictureUrl;
    } else {
      saveExpectedData(account.name, current.displayName, current.pictureUrl);
      expectedPictureUrl = current.pictureUrl;
      alertMessages.push(`üì∏ ‡πÄ‡∏ã‡∏ü expected ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ LINE
    if (expectedDisplayName) {
      if (current.displayName !== expectedDisplayName) {
        alertMessages.push(`‚ùå ‡∏ä‡∏∑‡πà‡∏≠ LINE ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "${expectedDisplayName}" ‚Üí "${current.displayName}"`);
      } else {
        alertMessages.push(`‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ LINE ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${current.displayName}`);
      }
    } else {
      if (current.displayName !== expectedData.displayName) {
        alertMessages.push(`‚ùå ‡∏ä‡∏∑‡πà‡∏≠ LINE ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "${expectedData.displayName}" ‚Üí "${current.displayName}"`);
        saveExpectedData(account.name, current.displayName, current.pictureUrl);
      } else {
        alertMessages.push(`‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ LINE: ${current.displayName}`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ LINE
    if (!current.pictureUrl) {
      alertMessages.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (pictureUrl = null)`);
    } else {
      try {
        const expectedHash = await hashImageFromUrl(expectedPictureUrl);
        const currentHash = await hashImageFromUrl(current.pictureUrl);
        const distance = hammingDistance(expectedHash, currentHash);
        const similarity = ((1 - distance / (expectedHash.length * 4)) * 100).toFixed(2);

        if (similarity < 95) {
          alertMessages.push(`‚ùå ‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ${similarity}%)`);
          saveExpectedData(account.name, current.displayName, current.pictureUrl);
        } else {
          alertMessages.push(`‚úÖ ‡∏£‡∏π‡∏õ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (${similarity}%)`);
        }
      } catch (hashErr) {
        alertMessages.push(`‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${hashErr.message}`);
      }
    }
  } catch (err) {
    alertMessages.push(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.response?.data || err.message}`);
  } finally {
    const msg = `üì¢ [${account.name}]
` + alertMessages.join("\n");
    await sendTelegram(account.telegramBotToken, account.telegramChatId, msg);
    console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${account.name}`);
  }
}

async function checkAllAccounts() {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (parallel)...");
  await Promise.all(config.accounts.map(checkAccount));
}

function hammingDistance(hash1, hash2) {
  let distance = 0;
  for (let i = 0; i < hash1.length; i++) {
    if (hash1[i] !== hash2[i]) distance++;
  }
  return distance;
}

const intervalMs = config.checkIntervalMinutes * 60 * 1000;
console.log(`‚è±Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å ${config.checkIntervalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ (parallel)`);
setInterval(() => {
  console.log(`
‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (parallel)`);
  checkAllAccounts();
}, intervalMs);

checkAllAccounts();
